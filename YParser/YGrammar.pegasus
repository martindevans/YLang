@namespace YParser
@classname YParser
@accessibility internal
@using System.Globalization
@using System.Linq
@using YGrammar
@using YGrammar.OuterStatements
@using YGrammar.InnerStatements
@using YGrammar.Expressions
@start program
@trace true

@members
{
    private readonly YExpressions _expressions = new YExpressions();
    private readonly YValues _values = new YValues();
    private readonly YWhitespace _ws = new YWhitespace();
}

program <Program>
    = i:import<0,, (comment / _)>
    _ con:constant<0,, (comment / _)>
    _ str:structdef<0,, (comment / _)>
    _ cal:callable<0,, (comment / _)>
    _ m:main?
    _ EOF
    { new Program(i.ToArray(), con.ToArray(), str.ToArray(), cal.ToArray(), m.SingleOrDefault()) }

import <Import>
    = "import" _ p:string _ ns:namespace _ ";" { new Import(p, ns) }

namespace <Identifier?>
    = "in" _ ns:nested_identifier { ns }
    / { null }

structdef <StructDefinition>
    = "struct" _ n:simple_identifier _ "{" _ f:fielddef<0,,_ "," _> _ "}" { new StructDefinition(n, f.ToArray()) }

fielddef <FieldDefinition>
    = n:simple_identifier _ ":" _ t:nested_identifier { new FieldDefinition(n, t) }

constant <Constant>
    = "const" _ f:fielddef _ "=" _ e:expression _ ";" { new Constant(f, e) }

main <MainBody>
    = "main" _ "{" _ "body:todo" _ "}" { new MainBody(Array.Empty<BaseOuterStatement>()) }

// ########################################
// Calls

callable <CallableDefinition>
    = c:calltype _ n:simple_identifier _ "(" _ a:arglist _ ")" _ r:call_return_type _ w:contract<0,,_> _ "{" _ "body:todo" _ "}" { new CallableDefinition(n, c, a, r, null, w.ToArray()) }

contract <Contract>
    = "requires" _ e:expression _ ";" { new Contract(ContractType.Requires, e) }
    / "ensures" _ e:expression _ ";" { new Contract(ContractType.Ensures, e) }

call_return_type <Identifier?>
    = "->" _ i:nested_identifier { i }
    / { null }

calltype <CallType>
    = "proc" { CallType.Goto }
    / "macro" { CallType.Inline }

arglist <IReadOnlyList<ParameterDefinition>>
    = a:arg<0,,_ "," _> { a.ToArray() }

arg <ParameterDefinition>
    = c:"copy"? _ f:fielddef { new ParameterDefinition(f, c.Count == 1) }

// ########################################
// Identifiers

nested_identifier <Identifier>
    = t:simple_identifier<1,,".">
    { new Identifier(t.Select(a => a.Path[0]).ToArray()) }

simple_identifier <Identifier>
    = s:([a-zA-Z_][a-zA-Z0-9_]<0,>)
    { new Identifier(new[] { s }) }

// ########################################
// Imported Rules

expression <BaseExpression> = #parse{ this._expressions.Exported.Expression(ref state) }
number <decimal> = #parse{ this._values.Exported.Number(ref state) }
string <string> = #parse{ this._values.Exported.String(ref state) }
newline = #parse{ this._ws.Exported.Newline(ref state) }
comment = #parse{ this._ws.Exported.Comment(ref state) }
_ = #parse{ this._ws.Exported._(ref state) }
EOF = #parse{ this._ws.Exported.EOF(ref state) }